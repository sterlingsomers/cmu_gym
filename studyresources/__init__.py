from absl import flags
from json import dumps as dump_as_json_string
from json import dump
from pprint import pformat

FLAGS = flags.FLAGS

original_drawn_map = [
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 25,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 25,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]

default_drawn_map_key = 'original_drawn'
default_hiker_location = (3,3)
default_drone_location = (7,7)

long_mountain_map = [
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 25,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 25,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]

hiker_by_mountain_map = [
     [3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 25,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 25,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]


no_transit_map = [
     [3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]




flatland_map = [
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]


obstacles_map = [
     [ 3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 3, 15, 15,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [15, 15, 15,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [15, 15,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [15, 15,  3, 17,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]



river_map = [
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [15, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 15, 15, 15, 15],
     [ 2,  2,  2,  2, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2, 15, 15,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2, 15, 15,  2,  2,  2,  2,  2,  2, 15, 15,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2, 15, 15,  2,  2,  2,  2, 15, 15,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2, 15, 15,  2,  2, 15, 15,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 15,  2,  2, 15,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 15,  2,  2, 15,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 15,  2,  2, 15,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]



treeline_map = [
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3, 15],
     [ 2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  3,  3,  2,  2,  3,  3,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  3,  2,  2,  3,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  3,  2,  2,  3,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  3,  2,  2,  3,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]


canyon_map = [
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2, 25, 25,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2, 25, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2, 25, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2, 26, 26,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 26,  2,  2, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2, 26, 26, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2, 25, 25,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]




flatland_map = [
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]



tower_map = [
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2, 17,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
     [2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
]


map_dictionary = {
     'original_drawn':  original_drawn_map,
     'long_mountain': long_mountain_map,
     'hiker_by_mountain': hiker_by_mountain_map,
     'no_transit': no_transit_map,
     'obstacles': obstacles_map,
     'river': river_map,
     'treeline': treeline_map,
     'canyon': canyon_map,
     'tower': tower_map,
     'flatland': flatland_map
}

def get_map():
     print('Using map ' + str(FLAGS.map))
     map_name = FLAGS.map
     if map_name in map_dictionary:
          return map_dictionary[map_name]
     return map_dictionary[default_drawn_map_key]


def get_hiker():
     try:
          print('Using hiker (' + str(FLAGS.hikerx) + ',' + str(FLAGS.hikery) + ')')
          return (FLAGS.hikerx,FLAGS.hikery)
     except Exception as e:
          print('Error Using hiker (' + str(default_hiker_location[0]) + ',' + str(default_hiker_location[1]) + ')'+ ":" + str(e))
          return default_hiker_location


def get_drone():
     try:
          print('Using drone (' + str(FLAGS.dronex) + ',' + str(FLAGS.droney) + ')')
          return (FLAGS.dronex,FLAGS.droney)
     except Exception as e:
          print('Error Using drone (' + str(default_drone_location[0]) + ',' + str(default_drone_location[1]) + ')' + ":" + str(e))
          return default_drone_location


def get_map_names():
     return dump_as_json_string(list(map_dictionary.keys()))


def get_map_object_by_name(name):
     if name in map_dictionary:
          return map_dictionary[name]
     return {}


def get_map_by_name(name):
     col_width = 3
     if name in map_dictionary:
          matrix_string = ""
          for row in map_dictionary[name]:
               for element in row:
                    matrix_string += "".join(str(element).rjust(col_width))
               matrix_string += '\n'
          return matrix_string
     return []

study_help_keys = ["map", "hikerx", "hikery", "dronex", "droney", "getnames", "getmap", "studyhelp"]

def studyhelp():
     pprintstring = ''
     for key in study_help_keys:
          padkey = key + ":"
          pprintstring += padkey.ljust(9) +  (FLAGS[key].help) + '\n'
     return pprintstring

def svalue(number):
     try:
          #return str('%.6f'%number)
          if number < 0.000001:
               return "0%"
          if number < 0.01:
               return "~0%"
          return str('{:.2%}'.format(number))
     except Exception as e:
          return str(e)


def action_probability_matrix(action_probs):
     if action_probs is None:
          return None
     try:
          action_array = action_probs[0]
          try:
               drop_value = svalue(action_array[15])
          except:
               drop_value = ' '
          matrix = [
               ['Direction','\u2190','\u2196', '\u2191', '\u2197', '\u2192'],
               ['Up',svalue(action_array[10]), svalue(action_array[11]), svalue(action_array[12]), svalue(action_array[13]), svalue(action_array[14])],
               ['Level',svalue(action_array[5]), svalue(action_array[6]), svalue(action_array[7]), svalue(action_array[8]), svalue(action_array[9])],
               ['Down',svalue(action_array[0]), svalue(action_array[1]), svalue(action_array[2]), svalue(action_array[3]),  svalue(action_array[4])],
               ['Drop',' ',' ',drop_value,' ',' ']
          ]
          return matrix
     except Exception as e:
          return [[str(e)]]


class Mission:
     def __init__(self, mission_file_name):
          self.mission_file_name = mission_file_name
          self.mission_dictionary = {}
          return

     def show(self):
          return dump_as_json_string(self.mission_dictionary)

     def add(self, step, label, data):
          if step not in self.mission_dictionary:
               print('Adding step ' + str(step))
               self.mission_dictionary[step] = {}
          print('Setting step ' + str(step) + ' data for ' + label)
          self.mission_dictionary[step][label] = data
          return

     def export_json(self):
          with open(self.mission_file_name, 'w') as outfile:
               print('Saving ' + self.mission_file_name)
               dump(self.mission_dictionary, outfile)
          return
